# Generated by Django 4.2.6 on 2023-12-21 15:19

import base_app.models.groups
import base_app.models.mixins
import base_app.models.user
import base_app.models.utils
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.comparison
import django.db.models.functions.text
import django.utils.timezone
import shortuuid.django_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('bio', models.CharField(blank=True, max_length=100, null=True)),
                ('photo', models.ImageField(default='defaults/user/default.png', max_length=255, upload_to=base_app.models.user.user_photo_path)),
                ('status', models.PositiveSmallIntegerField(default=0, verbose_name='user status')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', base_app.models.user.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='group name')),
                ('unique_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='unique name')),
                ('unique_id', shortuuid.django_fields.ShortUUIDField(alphabet=None, length=22, max_length=22, prefix='', verbose_name='unique group id')),
                ('photo', models.ImageField(blank=True, default='defaults/group/default.png', upload_to=base_app.models.groups.group_photo_path, verbose_name='group photo')),
                ('description', models.TextField(blank=True, default='', max_length=500, verbose_name='group description')),
                ('public', models.BooleanField(default=False, verbose_name='is public group')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='group created')),
                ('edited', models.DateTimeField(auto_now=True, verbose_name='group edited')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
            bases=(base_app.models.mixins.ChatMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GroupMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Message content')),
                ('seen', models.BooleanField(default=False)),
                ('created', models.DateTimeField(editable=False)),
                ('edited', models.DateTimeField(editable=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='base_app.group')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Message owner')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created datetime')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_me', to=settings.AUTH_USER_MODEL, verbose_name='User One')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_me', to=settings.AUTH_USER_MODEL, verbose_name='User Two')),
            ],
            options={
                'ordering': ('-created',),
            },
            bases=(base_app.models.mixins.ChatMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Message content')),
                ('seen', models.BooleanField(default=False)),
                ('created', models.DateTimeField(editable=False)),
                ('edited', models.DateTimeField(editable=False)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='base_app.pchat', verbose_name='Message PChat')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Message owner')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MessageFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(max_length=50, verbose_name='File type')),
                ('metadata', models.JSONField()),
                ('file', models.FileField(upload_to=base_app.models.utils.MessageFilePath('pchat', 'message.chat_id'), validators=[django.core.validators.FileExtensionValidator({'flv', 'webm', 'ogg', 'mov', 'jpg', 'avi', 'gif', 'png', 'wmv', 'mp3', 'mp4', 'mkv', 'jpeg', 'wav'})])),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='base_app.pmessage')),
            ],
            options={
                'ordering': ('-id',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='group role')),
                ('is_default', models.BooleanField(default=False, verbose_name='is default role')),
                ('send_msg', models.BooleanField(default=True, verbose_name='can send message')),
                ('delete_msg', models.BooleanField(default=False, verbose_name='can delete message')),
                ('kick_user', models.BooleanField(default=False, verbose_name='can kick user')),
                ('add_user', models.BooleanField(default=True, verbose_name='can add user')),
                ('ban_user', models.BooleanField(default=False, verbose_name='can ban user')),
                ('unban_user', models.BooleanField(default=False, verbose_name='can unban user')),
                ('edit_group', models.BooleanField(default=False, verbose_name='can edit group')),
                ('super_admin', models.BooleanField(default=False, verbose_name='is super admin')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', related_query_name='role', to='base_app.group')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='GroupMessageFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(max_length=50, verbose_name='File type')),
                ('metadata', models.JSONField()),
                ('file', models.FileField(upload_to=base_app.models.utils.MessageFilePath('group', 'message.group_id'), validators=[django.core.validators.FileExtensionValidator({'flv', 'webm', 'ogg', 'mov', 'jpg', 'avi', 'gif', 'png', 'wmv', 'mp3', 'mp4', 'mkv', 'jpeg', 'wav'})])),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='base_app.groupmessage')),
            ],
            options={
                'ordering': ('-id',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joint', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_members', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='base_app.group')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', related_query_name='member', to='base_app.grouprole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-joint',),
            },
        ),
        migrations.CreateModel(
            name='GroupBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(default='No Reason', max_length=1000, verbose_name='ban reason')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='banned datetime')),
                ('banned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='banned_people', to=settings.AUTH_USER_MODEL, verbose_name='banned by user')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_people', to='base_app.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banned_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='chat_to',
            field=models.ManyToManyField(related_name='chat_from', through='base_app.PChat', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_groups',
            field=models.ManyToManyField(related_name='people', through='base_app.GroupMember', to='base_app.group'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='pmessage',
            index=models.Index(models.OrderBy(models.F('created'), descending=True), name='pmsg_created_idx'),
        ),
        migrations.AddIndex(
            model_name='pchat',
            index=models.Index(models.OrderBy(models.F('created'), descending=True), name='pchat_created_idx'),
        ),
        migrations.AddConstraint(
            model_name='pchat',
            constraint=models.UniqueConstraint(django.db.models.functions.comparison.Least('from_user', 'to_user'), django.db.models.functions.comparison.Greatest('from_user', 'to_user'), name='unique_chat', violation_error_message='You already have a chat with this person.'),
        ),
        migrations.AddConstraint(
            model_name='pchat',
            constraint=models.CheckConstraint(check=models.Q(('from_user', models.F('to_user')), _negated=True), name='not_the_same_user', violation_error_message="Can't start chat with yourself."),
        ),
        migrations.AddIndex(
            model_name='messagefile',
            index=models.Index(django.db.models.functions.text.Lower('file_type'), name='pmsg_file_type_idx'),
        ),
        migrations.AddIndex(
            model_name='grouprole',
            index=models.Index(models.F('name'), name='group_role_idx'),
        ),
        migrations.AddConstraint(
            model_name='grouprole',
            constraint=models.UniqueConstraint(fields=('group', 'name'), name='unique_group_role', violation_error_message='Group role with this name already exists!'),
        ),
        migrations.AddConstraint(
            model_name='grouprole',
            constraint=models.UniqueConstraint(models.OrderBy(models.F('is_default'), descending=True), models.F('group'), condition=models.Q(('is_default', True)), name='unique_default_role', violation_error_message='Group can have only one default role'),
        ),
        migrations.AddIndex(
            model_name='groupmessagefile',
            index=models.Index(django.db.models.functions.text.Lower('file_type'), name='group_file_type_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmessage',
            index=models.Index(models.OrderBy(models.F('created'), descending=True), name='group_msg_created_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmember',
            index=models.Index(models.OrderBy(models.F('joint'), descending=True), name='group_joint_date_idx'),
        ),
        migrations.AddConstraint(
            model_name='groupmember',
            constraint=models.UniqueConstraint(fields=('user', 'group'), name='join_group_once', violation_error_message="You're already in the group."),
        ),
        migrations.AddConstraint(
            model_name='groupmember',
            constraint=models.CheckConstraint(check=models.Q(('user', models.F('added_by')), _negated=True), name='check_added_by', violation_error_message="Can't add yourself to the group."),
        ),
        migrations.AddIndex(
            model_name='groupban',
            index=models.Index(models.OrderBy(models.F('created'), descending=True), name='ban_created_idx'),
        ),
        migrations.AddConstraint(
            model_name='groupban',
            constraint=models.UniqueConstraint(fields=('user', 'group'), name='ban_user_once', violation_error_message='This user has already been banned'),
        ),
        migrations.AddConstraint(
            model_name='groupban',
            constraint=models.CheckConstraint(check=models.Q(('user', models.F('banned_by')), _negated=True), name='check_banned_by', violation_error_message="Can't ban yourself from group!"),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(django.db.models.functions.text.Lower('name'), name='group_name_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(models.OrderBy(models.F('created'), descending=True), name='group_created_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(models.OrderBy(models.F('public'), descending=True), name='group_public_idx'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(models.F('unique_id'), name='unique_group_id'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('unique_name'), condition=models.Q(('public', True)), name='unique_group_name', violation_error_message='Public group name should be unique.'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.CheckConstraint(check=models.Q(('public', False), ('unique_name__isnull', False), _connector='OR'), name='check_public_name_notnull', violation_error_message='Public group name should not be null.'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name', 'last_name'], name='user_fullname_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(models.OrderBy(models.F('status'), descending=True), name='user_status_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_email', violation_error_message='This email already exists.'),
        ),
    ]
